// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/gameserver.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerServiceClient is the client API for GameServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (GameServerService_JoinClient, error)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerServiceClient(cc grpc.ClientConnInterface) GameServerServiceClient {
	return &gameServerServiceClient{cc}
}

func (c *gameServerServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (GameServerService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameServerService_ServiceDesc.Streams[0], "/gameserver.GameServerService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServerServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameServerService_JoinClient interface {
	Recv() (*JoinResponse, error)
	grpc.ClientStream
}

type gameServerServiceJoinClient struct {
	grpc.ClientStream
}

func (x *gameServerServiceJoinClient) Recv() (*JoinResponse, error) {
	m := new(JoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServerServiceClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gameserver.GameServerService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServiceServer is the server API for GameServerService service.
// All implementations must embed UnimplementedGameServerServiceServer
// for forward compatibility
type GameServerServiceServer interface {
	Join(*JoinRequest, GameServerService_JoinServer) error
	Allocate(context.Context, *AllocateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameServerServiceServer()
}

// UnimplementedGameServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServiceServer struct {
}

func (UnimplementedGameServerServiceServer) Join(*JoinRequest, GameServerService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedGameServerServiceServer) Allocate(context.Context, *AllocateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedGameServerServiceServer) mustEmbedUnimplementedGameServerServiceServer() {}

// UnsafeGameServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServiceServer will
// result in compilation errors.
type UnsafeGameServerServiceServer interface {
	mustEmbedUnimplementedGameServerServiceServer()
}

func RegisterGameServerServiceServer(s grpc.ServiceRegistrar, srv GameServerServiceServer) {
	s.RegisterService(&GameServerService_ServiceDesc, srv)
}

func _GameServerService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServerServiceServer).Join(m, &gameServerServiceJoinServer{stream})
}

type GameServerService_JoinServer interface {
	Send(*JoinResponse) error
	grpc.ServerStream
}

type gameServerServiceJoinServer struct {
	grpc.ServerStream
}

func (x *gameServerServiceJoinServer) Send(m *JoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GameServerService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameserver.GameServerService/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerService_ServiceDesc is the grpc.ServiceDesc for GameServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserver.GameServerService",
	HandlerType: (*GameServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _GameServerService_Allocate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _GameServerService_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gameserver.proto",
}
