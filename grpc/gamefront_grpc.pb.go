// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/gamefront.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameFrontServiceClient is the client API for GameFrontService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameFrontServiceClient interface {
	EntryGame(ctx context.Context, in *EntryGameRequest, opts ...grpc.CallOption) (GameFrontService_EntryGameClient, error)
}

type gameFrontServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameFrontServiceClient(cc grpc.ClientConnInterface) GameFrontServiceClient {
	return &gameFrontServiceClient{cc}
}

func (c *gameFrontServiceClient) EntryGame(ctx context.Context, in *EntryGameRequest, opts ...grpc.CallOption) (GameFrontService_EntryGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameFrontService_ServiceDesc.Streams[0], "/gamefront.GameFrontService/EntryGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameFrontServiceEntryGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameFrontService_EntryGameClient interface {
	Recv() (*EntryGameResponse, error)
	grpc.ClientStream
}

type gameFrontServiceEntryGameClient struct {
	grpc.ClientStream
}

func (x *gameFrontServiceEntryGameClient) Recv() (*EntryGameResponse, error) {
	m := new(EntryGameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameFrontServiceServer is the server API for GameFrontService service.
// All implementations must embed UnimplementedGameFrontServiceServer
// for forward compatibility
type GameFrontServiceServer interface {
	EntryGame(*EntryGameRequest, GameFrontService_EntryGameServer) error
	mustEmbedUnimplementedGameFrontServiceServer()
}

// UnimplementedGameFrontServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameFrontServiceServer struct {
}

func (UnimplementedGameFrontServiceServer) EntryGame(*EntryGameRequest, GameFrontService_EntryGameServer) error {
	return status.Errorf(codes.Unimplemented, "method EntryGame not implemented")
}
func (UnimplementedGameFrontServiceServer) mustEmbedUnimplementedGameFrontServiceServer() {}

// UnsafeGameFrontServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameFrontServiceServer will
// result in compilation errors.
type UnsafeGameFrontServiceServer interface {
	mustEmbedUnimplementedGameFrontServiceServer()
}

func RegisterGameFrontServiceServer(s grpc.ServiceRegistrar, srv GameFrontServiceServer) {
	s.RegisterService(&GameFrontService_ServiceDesc, srv)
}

func _GameFrontService_EntryGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EntryGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameFrontServiceServer).EntryGame(m, &gameFrontServiceEntryGameServer{stream})
}

type GameFrontService_EntryGameServer interface {
	Send(*EntryGameResponse) error
	grpc.ServerStream
}

type gameFrontServiceEntryGameServer struct {
	grpc.ServerStream
}

func (x *gameFrontServiceEntryGameServer) Send(m *EntryGameResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GameFrontService_ServiceDesc is the grpc.ServiceDesc for GameFrontService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameFrontService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamefront.GameFrontService",
	HandlerType: (*GameFrontServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EntryGame",
			Handler:       _GameFrontService_EntryGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gamefront.proto",
}
